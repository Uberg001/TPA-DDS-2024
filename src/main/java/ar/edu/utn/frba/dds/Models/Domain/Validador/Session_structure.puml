@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "ar.edu.utn.frba.dds.Validador.Session",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_100278 { 
   	label=edu
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1878955145 { 
   	label=utn
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Hasheo539222008[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Hasheo</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ comparePlainWithHash(storedPassword: String, password: String): Boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- doSalt(password: String, salt: byte[]): byte[]</TD></TR>
<TR><TD ALIGN="LEFT" >- generateSalt(): byte[]</TD></TR>
<TR><TD ALIGN="LEFT" >- giveMeHash(password: String): String</TD></TR>
<TR><TD ALIGN="LEFT" >- giveMeSaltOfPass(password: String): byte[]</TD></TR>
<TR><TD ALIGN="LEFT" >- hashAndStreching(saltedPassword: byte[]): byte[]</TD></TR>
<TR><TD ALIGN="LEFT" >+ hashearPass(password: String): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Login539222008[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Login</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ login()</TD></TR>
<TR><TD ALIGN="LEFT" >- verificarPassword(password: String, intentosMax: Integer, intentos: Integer): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ManejoArchivo539222008[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ManejoArchivo</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- buscarUsuario(br: BufferedReader, userNew: String, passNew: String, intentos: Integer): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkUser(userSended: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ saveUserAndPass(username: String, passHashed: String)</TD></TR>
<TR><TD ALIGN="LEFT" >- validarContrase√±a(passNew: String, storedHashedPassword: String, intentos: Integer): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Mensajes539222008[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Mensajes</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getMsgIntentosFallidos(intentosFallidos: Integer): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMsgIntentosMax(intentosMax: Integer, intentos: Integer): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PasswordGenerator1930737625[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PasswordGenerator</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ generateRandomPassword(length: int): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PasswordValidation1930737625[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PasswordValidation</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ esPasswordIgualAUsuario(username: String, password: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" ># esPasswordProhibido(password: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- esPasswordSintacticamenteValido(password: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ validarPassword(username: String, password: String): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Register1930737625[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Register</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- generateRandomPassword(scanner: Scanner): String</TD></TR>
<TR><TD ALIGN="LEFT" >- getManualPassword(scanner: Scanner, username: String, intentosFallidos: int): String</TD></TR>
<TR><TD ALIGN="LEFT" >- getPassword(scanner: Scanner, username: String): String</TD></TR>
<TR><TD ALIGN="LEFT" >- getPasswordOption(scanner: Scanner): String</TD></TR>
<TR><TD ALIGN="LEFT" >- getUsername(scanner: Scanner): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ register()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Session539222008[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Session</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ login()</TD></TR>
<TR><TD ALIGN="LEFT" >+ register()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
Login539222008 -> Hasheo539222008[label="verificarPassword() -> comparePlainWithHash()"];
Login539222008 -> ManejoArchivo539222008[label="login() -> checkUser()"];
PasswordGenerator1930737625 -> PasswordValidation1930737625[label="generateRandomPassword() -> esPasswordProhibido()"];
Register1930737625 -> Hasheo539222008[label="register() -> hashearPass()"];
Register1930737625 -> PasswordGenerator1930737625[label="generateRandomPassword() -> generateRandomPassword()"];
Session539222008 -> Login539222008[label="login() -> login()"];
Session539222008 -> Register1930737625[label="register() -> register()"];
    
}
@enduml